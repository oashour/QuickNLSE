#!/bin/bash

function runx () {
	
	# Print info
	echo "X-running $1"
	# Figure out file names and stuff
	execute="`echo $1| cut -d'_' -f 1`"
	noext="`echo $1|cut -d'.' -f 1`"
	outfile="$1"
	mfile="${noext}_time_${2}.m"

	# Timing parameters
	begin=1000
	no=10
	end=10000000
	delta=$(( (end-begin)/no ))
	echo -ne "steps = [1000 5000 10000 50000 100000 500000 1000000 5000000 10000000];\n"  > $mfile 
	echo -ne "$noext""_time_""$2"" = [" >> $mfile

	echo "Output redirected to hell."
	echo
	if [[ "$execute" == "mpi" ]]
	then
		#for c in 1000 5000 10000 50000 100000 500000 1000000 5000000 10000000
		for c in 100 200 300 400 500 600
			do
				echo "c = $c. Remaining runs: ???"
				mpirun -np 4 ./$outfile $c $mfile #> /dev/null 
			done
    else
		#for c in 1000 5000 10000 50000 100000 500000 1000000 5000000 10000000
		for c in 100 200 300 400 500 600
			do
				echo "c = $c. Remaining runs: ???"
				./$outfile $c $mfile #> /dev/null 
			done
	fi

	echo -ne "];\n" >> $mfile
	echo -ne "plot(steps, time, '-*b');\n" >> $mfile
	
	echo
}
function concatenate {
	#plot parameters
	title=Test
	xlabel=xtest
	ylabel=ytest

	# Input files
	mpi_fdtd="mpi_fdtd_time_${1}.m"
	mpi_fft="mpi_fft_time_${1}.m"
	gpu_fdtd="gpu_fdtd_time_${1}.m"
	gpu_fdtds="gpu_fdtds_time_${1}.m"
	gpu_fft="gpu_fft_time_${1}.m"
	gpu_ffts="gpu_ffts_time_${1}.m"
	cpu_fdtd="cpu_fdtd_time_${1}.m"
	cpu_fft="cpu_fft_time_${1}.m"

	# Output file
	out_f="time_all_${1}.m"

	# File information
	echo "% Timing file automatically generated by bash and awk!" > $out_f
	# Set up steps
	awk 'NR==1'  $mpi_fdtd >> $out_f
	echo 				   >> $out_f

	# MPI_FDTD
	echo -n "mpi_fdtd_"	 	>> $out_f
	awk 'NR==2' $mpi_fdtd 	>> $out_f
	# MPI_FFT
	echo -n "mpi_fft_" 		>> $out_f
	awk 'NR==2' $mpi_fft 	>> $out_f
	# CPU_FDTD
	echo -n "cpu_fdtd_" 	>> $out_f
	awk 'NR==2' $cpu_fdtd 	>> $out_f
	# CPU_FFT
	echo -n "cpu_fft_" 		>> $out_f
	awk 'NR==2' $cpu_fft 	>> $out_f
	# GPU_FDTD
	echo -n "gpu_fdtd_" 	>> $out_f
	awk 'NR==2' $gpu_fdtd 	>> $out_f
	# GPU_FDTDS
	echo -n "gpu_fdtds_" 	>> $out_f
	awk 'NR==2' $gpu_fdtds 	>> $out_f
	# GPU_FFT
	echo -n "gpu_fft_" 		>> $out_f
	awk 'NR==2' $gpu_fft 	>> $out_f
	# GPU_FFTS
	echo -n "gpu_ffts_" 	>> $out_f
	awk 'NR==2' $gpu_ffts 	>> $out_f
	echo    				>> $out_f

	# Plotting!
	echo -e "plot(steps, mpi_fdtd_time, '-r', 'LineWidth', 2)"	 	 >> $out_f
	echo -e "hold on"											 	 >> $out_f 
	echo -e "plot(steps, mpi_fft_time, '-b', 'LineWidth', 2)"	 	 >> $out_f 
	echo -e "hold on"											 	 >> $out_f 
	echo -e "plot(steps, cpu_fdtd_time, '-g', 'LineWidth', 2)"	 	 >> $out_f  
	echo -e "hold on"											 	 >> $out_f 
	echo -e "plot(steps, cpu_fft_time, '-y', 'LineWidth', 2)"	  	 >> $out_f 
	echo -e "hold on"											  	 >> $out_f 
	echo -e "plot(steps, gpu_fft_time/1000, '-m', 'LineWidth', 2)"	 >> $out_f
	echo -e "hold on"											  	 >> $out_f
	echo -e "plot(steps, gpu_ffts_time/1000, '-.m', 'LineWidth', 2)" >> $out_f
	echo -e "hold on"											 	 >> $out_f
	echo -e "plot(steps, gpu_fdtd_time/1000, '-c', 'LineWidth', 2)"	 >> $out_f
	echo -e "hold on"											     >> $out_f
	echo -e "plot(steps, gpu_fdtds_time/1000, '-.c', 'LineWidth', 2)">> $out_f
	echo													  	     >> $out_f

	# Plot details
	echo -e "title('$title')"    >> $out_f 
	echo -e "xlabel('$xlabel')"  >> $out_f 
	echo -e "ylabel('$ylabel')"  >> $out_f 
	echo -e "grid on;"           >> $out_f 

	# Legend
	echo -ne "legend('MPI FDTD', 'MPI FFT', 'CPU FDTD', 'CPU FFT', " >> $out_f 
	echo -ne "'GPU FFT', 'GPU FFTS', 'GPU FDTD', 'GPU FDTDS', 0);"   >> $out_f
}

function clean_up {
	echo "Reverting!"
	sed -i "s/#define CUDAR_ERROR_CHECKING 0/#define CUDAR_ERROR_CHECKING 1/" ../lib/cu_helpers.h
	sed -i "s/#define CUFFT_ERROR_CHECKING 0/#define CUFFT_ERROR_CHECKING 1/" ../lib/cu_helpers.h
	sed -i "s/#define MAX_PSI_CHECKING 0/#define MAX_PSI_CHECKING 1/" ../lib/cu_helpers.h
	sed -i "s/#define MAX_PSI_CHECKING 0/#define MAX_PSI_CHECKING 1/" ../lib/helpers.h
	exit
}

trap clean_up SIGHUP SIGINT SIGTERM # EXIT

# Define errors (fix)
NO_COMPILER=88
NO_FILE=69
NO_CFLAG=89
NOCOMPILE_NORUN=87
WRONG_FLAG=91

# Define flags
cflag='false'   # compile which files
oflag='false' # optimize or not
rflag='false' # run or not
pflag="$NLSE/1D"
hflag='false'
xflag='false'	#no xruns
eflag='1'
# Get arguments
while getopts 'c:r:x:ohp:e:' flag; do
  case "${flag}" in
    c) cflag="${OPTARG}" ;;
    r) rflag="${OPTARG}" ;;
    o) oflag='true' ;;
	h) hflag='true' ;;
	p) pflag="${OPTARG}" ;;
	x) xflag="${OPTARG}" ;;
	e) eflag="${OPTARG}" ;;
    *) echo "Unexpected option ${flag}" 
	   exit $WRONG_FLAG;;
  esac
done

# change working directory
cd $pflag
if [[ "$oflag" = "true" ]]
then
	echo "Turning off error checking and enabling optimizations"
	sed -i "s/#define CUDAR_ERROR_CHECKING 1/#define CUDAR_ERROR_CHECKING 0/" ../lib/cu_helpers.h
	sed -i "s/#define CUFFT_ERROR_CHECKING 1/#define CUFFT_ERROR_CHECKING 0/" ../lib/cu_helpers.h
	sed -i "s/#define MAX_PSI_CHECKING 1/#define MAX_PSI_CHECKING 0/" ../lib/cu_helpers.h
	sed -i "s/#define MAX_PSI_CHECKING 1/#define MAX_PSI_CHECKING 0/" ../lib/helpers.h
fi

if [ "$rflag" == "p" ]
then
	rflag=$cflag
fi

if [[ "$rflag" == "false" && "$cflag" == "false" && "$xflag" == "false" ]]
then
	hflag="true"
	echo "No files to run or compile. See help below."
fi

if [[ "$#" == '0' || "$hflag" == 'true' ]]
then
	echo "`basename $0` [OPTIONS]... [FILE]..."
	echo " Compile the files required for the nonlinear schrodinger equation "
	echo "Options: "
	echo -ne "-h \t Show this help." 
	echo
	echo -ne "-c (all, gpu, cpu, mpi, FILE) \t Compile (all, gpu, cpu, mpi) files or" 
	echo -ne "\t provided file. Compiler is deduced from filename prefix (e.g. mpi_)"
	echo
	echo -ne "-r (all, gpu, cpu, mpi, p, FILE) \t Run (all, gpu, cpu, mpi) files or" 
	echo -ne "\t provided file. type is deduced from filename prefix (e.g. mpi_)"
	echo -ne "\t use p for previous file."
	echo
	echo -ne "-o \t Turn on cuda optimizations. No error checking (runtime, libs)" 
	echo -ne "\t and does not check for max PSI. This is disabled by default."
    echo 
	echo -ne "-w \t working directory (1D, 2D, 3D). Default is current working directory"	
	echo
	exit $NO_ARGS
fi

case "$cflag" in
	all)	echo "Compiling $cflag"
			gcc cpu_fft.c ../lib/helpers.c ../lib/timers.c -o cpu_fft.out -std=c99 -Wall -lm  -lfftw3 && echo "cpu_fft.c compiled"
			gcc cpu_fdtd.c ../lib/helpers.c ../lib/timers.c -o cpu_fdtd.out -std=c99 -Wall -lm && echo "cpu_fdtd.c compiled" 
			mpicc mpi_fdtd.c ../lib/helpers.c  -o mpi_fdtd.out -std=c99 -Wall -lm   && echo "mpi_fdtd.c compiled" 
			mpicc mpi_fft.c ../lib/helpers.c -o mpi_fft.out -std=c99 -Wall -lm -lfftw3_mpi -lfftw3  && echo "mpi_fft.c compiled" 
			nvcc -arch compute_30 gpu_ffts.cu ../lib/cu_helpers.cu -o gpu_ffts.out -lcufft && echo "gpu_ffts.cu compiled" 
			nvcc -arch compute_30 gpu_fft.cu ../lib/cu_helpers.cu -o gpu_fft.out -lcufft && echo "gpu_fft.cu compiled" 
			nvcc -arch compute_30 gpu_fdtd.cu ../lib/cu_helpers.cu -o gpu_fdtd.out && echo "gpu_fdtd.cu compiled" 
			nvcc -arch compute_30 gpu_fdtds.cu ../lib/cu_helpers.cu -o gpu_fdtds.out && echo "gpu_fdtd.cu compiled" 
			echo "Compiled all."
			;;
    cpu)	echo "Compiling $cflag" 
			gcc cpu_fft.c ../lib/helpers.c ../lib/timers.c -o cpu_fft.out -std=c99 -Wall -lm  -lfftw3 && echo "cpu_fft.c compiled"
			gcc cpu_fdtd.c ../lib/helpers.c ../lib/timers.c -o cpu_fdtd.out -std=c99 -Wall -lm && echo "cpu_fdtd.c compiled" 
			echo "Compiled CPU."
			;;
	mpi)	echo "Compiling $cflag" 
			mpicc mpi_fdtd.c ../lib/helpers.c  -o mpi_fdtd.out -std=c99 -Wall -lm   && echo "mpi_fdtd.c compiled" 
			mpicc mpi_fft.c ../lib/helpers.c -o mpi_fft.out -std=c99 -Wall -lm -lfftw3_mpi -lfftw3  && echo "mpi_fft.c compiled" 
			echo "Compiled MPI."
			;;
	gpu)	echo "Compiling $cflag" 
			nvcc -arch compute_30 gpu_ffts.cu ../lib/cu_helpers.cu -o gpu_ffts.out -lcufft && echo "gpu_ffts.cu compiled" 
			nvcc -arch compute_30 gpu_fft.cu ../lib/cu_helpers.cu -o gpu_fft.out -lcufft && echo "gpu_fft.cu compiled" 
			nvcc -arch compute_30 gpu_fdtd.cu ../lib/cu_helpers.cu -o gpu_fdtd.out && echo "gpu_fdtd.cu compiled" 
			nvcc -arch compute_30 gpu_fdtds.cu ../lib/cu_helpers.cu -o gpu_fdtds.out && echo "gpu_fdtd.cu compiled" 
			echo "Compiled GPU."
			;;
	false)	echo "No compiles!" ;;
	*)      if [[ -e $cflag ]]
			then
				compiler=`echo $cflag| cut -d'_' -f 1`
				out="`echo $cflag| cut -d'.' -f 1`.out"
				echo "Compiling $cflag"
				case "${compiler}" in
					mpi)	mpicc $cflag ../lib/helpers.c -o $out -std=gnu99 -Wall -lm -lfftw3_mpi -lfftw3  && echo "$cflag compiled" 
							;;
					gpu)	nvcc -arch compute_30 $cflag ../lib/cu_helpers.cu -o $out -lcufft && echo "$cflag compiled"
							;;
					cpu)	gcc $cflag ../lib/helpers.c ../lib/timers.c -o $out -std=gnu99 -Wall -lm  -lfftw3 -lrt && echo "$cflag compiled"
							;;
					*)		echo "Error: file not properly named to identify compiler."
							echo "For mpicc, file should be mpi_*, for nvcc, gpu_*, and for
								  gcc, cpu_*"
							echo "Terminating."
							exit $WRONG_COMPILER
							;;
				esac
			else
				echo "Error: file not found."
				echo "Terminating."
				exit $NO_FILE
			fi
			;;
esac

echo

gpu_fdtd="gpu_fdtd_time_${eflag}.m"
gpu_fdtds="gpu_fdtds_time_${eflag}.m"
gpu_fft="gpu_fft_time_${eflag}.m"
gpu_ffts="gpu_ffts_time_${eflag}.m"
cpu_fdtd="cpu_fdtd_time_${eflag}.m"
cpu_fft="cpu_fft_time_${eflag}.m"
mpi_fdtd="mpi_fdtd_time_${eflag}.m"
mpi_fft="mpi_fft_time_${eflag}.m"

case "${rflag}" in
	all)	echo "Running $rflag"
			mpirun -np 4 ./mpi_fft.out ${mpi_fft} && echo "Finished running mpi_fft.out" 
			mpirun -np 4 ./mpi_fdtd.out ${mpi_fdtd} && echo "Finished running mpi_fdtd.out"
			./cpu_fft.out ${cpu_fft} && echo "Finished running cpu_fft.out"  
			./cpu_fdtd.out ${cpu_fdtd} && echo "Finished running cpu_fdtd.out" 
			./gpu_fft.out  ${gpu_fft} && echo "Finished running gpu_fft.out" 
			./gpu_ffts.out ${gpu_ffts} && echo "Finished running gpu_ffts.out" 
			./gpu_fdtd.out ${gpu_fdtd} && echo "Finished running gpu_fdtd.out" 
			./gpu_fdtds.out ${gpu_fdtds} && echo "Finished running gpu_fdtds.out" 
			concatenate ${eflag}
			;;
	gpu)	echo "Running $rflag" 
			./gpu_fft.out ${gpu_fft} && echo "Finished running gpu_fft.out" 
			./gpu_ffts.out ${gpu_ffts} && echo "Finished running gpu_ffts.out" 
			./gpu_fdtd.out ${gpu_fdtd} && echo "Finished running gpu_fdtd.out" 
			./gpu_fdtds.out ${gpu_fdtds} && echo "Finished running gpu_fdtds.out" 
			;;
	mpi)	echo "Running $rflag" 
			mpirun -np 4 ./mpi_fft.out ${mpi_fft} && echo "Finished running mpi_fft.out"    
			mpirun -np 4 ./mpi_fdtd.out ${mpi_ffts} && echo "Finished running mpi_fdtd.out"  
			;;
	cpu)	./cpu_fft.out ${cpu_fft} && echo "Finished running cpu_fft.out"  
			./cpu_fdtd.out ${cpu_ffts} && echo "Finished running cpu_fdtd.out" 
			;;
	false)  echo "No runs!" ;;
	*)		rflag="`echo $rflag| cut -d'.' -f 1`.out"
	        echo "Running $rflag."
			if [[ -e $rflag ]]
			then
				execute="`echo $rflag| cut -d'_' -f 1`"
				noext="`echo $rflag|cut -d'.' -f 1`"
				mfile="${noext}_time_${eflag}.m"
				case "${execute}" in
				mpi) mpirun -np 4 ./$rflag ${mfile} && echo "Finished running $rflag"
					 ;;
				gpu) ./$rflag ${mfile} && echo "Finished running $rflag" ;;
				cpu) ./$rflag ${mfile} && echo "Finished running $rflag" ;;
				exe) ./$rflag ${mfile} && echo "Finished running $rflag" ;;
				*)	 echo "Error: unknown file."
					 echo "To execute as normal executable append exe_ to filename."
					 echo "Terminating"
					 exit $RUN_ERROR
				esac
			else
				echo "Error: file not found."
				echo "Terminating."
				exit $NO_FILE
			fi
			;;
esac

case "${xflag}" in
	all)	runx "cpu_fdtd.out"  
			runx "cpu_fft.out"   
			runx "gpu_fdtd.out"  
			runx "gpu_fdtds.out" 
			runx "gpu_fft.out"   
			runx "gpu_ffts.out"  
			runx "mpi_fdtd.out"  
			runx "mpi_fft.out"   
			concatenate $eflag
			;;
	gpu)	runx "gpu_fdtd.out" 
			runx "gpu_fdtds.out" 
			runx "gpu_fft.out" 
			runx "gpu_ffts.out" 
			;;
	mpi)	runx "mpi_fdtd.out" 
			runx "mpi_fft.out"
			;;
	cpu)	runx "cpu_fdtd.out"       
			runx "cpu_fft.out"        
			;;
	false)  echo "No X-runs!" ;;
	*)		if [[ -e $xflag ]]
			then
				runx "$xflag" "$eflag"	               
			else
				echo "Error: file not found."
				echo "Terminating."
				exit $NO_FILE
			fi
			;;
esac
exit
